import cluster from 'cluster';
import os from 'os';
import app from './server.mjs';
import connectDatabase from './config/database.mjs';

const PORT = process.env.PORT || 3000;
const numCPUs = os.cpus().length;

// H√†m kh·ªüi ƒë·ªông server
const startServer = async () => {
  try {
    // K·∫øt n·ªëi database tr∆∞·ªõc khi kh·ªüi ƒë·ªông server
    await connectDatabase();
    
    // Kh·ªüi ƒë·ªông server
    const server = app.listen(PORT, () => {
      console.log(`üöÄ Server ƒëang ch·∫°y tr√™n c·ªïng ${PORT} (ti·∫øn tr√¨nh ${process.pid})`);
    });
    
    // X·ª≠ l√Ω t·∫Øt server m·ªôt c√°ch nh·∫π nh√†ng
    const gracefulShutdown = () => {
      console.log('Nh·∫≠n t√≠n hi·ªáu t·∫Øt server...');
      server.close(() => {
        console.log('ƒê√£ ƒë√≥ng k·∫øt n·ªëi HTTP');
        process.exit(0);
      });
      
      // N·∫øu server kh√¥ng ƒë√≥ng trong 10 gi√¢y, bu·ªôc t·∫Øt
      setTimeout(() => {
        console.error('Kh√¥ng th·ªÉ ƒë√≥ng k·∫øt n·ªëi, bu·ªôc t·∫Øt!');
        process.exit(1);
      }, 10000);
    };
    
    // X·ª≠ l√Ω c√°c t√≠n hi·ªáu t·∫Øt server
    process.on('SIGTERM', gracefulShutdown);
    process.on('SIGINT', gracefulShutdown);
    
    return server;
  } catch (error) {
    console.error('‚ùå Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông server:', error);
    process.exit(1);
  }
};

// Ch·ªâ d√πng cluster ·ªü m√¥i tr∆∞·ªùng production
const isDev = process.env.NODE_ENV !== 'production';

if (cluster.isPrimary && !isDev) {
  console.log(`M√°y ch·ªß ch√≠nh ${process.pid} ƒëang ch·∫°y`);
  
  // T·∫°o c√°c ti·∫øn tr√¨nh con cho m·ªói CPU
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }
  
  // N·∫øu ti·∫øn tr√¨nh con b·ªã l·ªói, t·∫°o m·ªõi
  cluster.on('exit', (worker) => {
    console.log(`Ti·∫øn tr√¨nh ${worker.process.pid} ƒë√£ d·ª´ng - ƒëang kh·ªüi ƒë·ªông l·∫°i`);
    cluster.fork();
  });
} else {
  // Kh·ªüi ƒë·ªông server
  startServer();
}